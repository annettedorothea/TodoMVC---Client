/********************************************************************************
 * generated by de.acegen 1.0.2
 ********************************************************************************/


import * as ScenarioUtils from "../../../acegen/src/ScenarioUtils";
import * as TodoActionIds from "../../../acegen/gen/todo/TodoActionIds";

const testId = ScenarioUtils.testId();

context('NewTodoChangedWithReturn', () => {
    beforeEach(() => {
        ScenarioUtils.getCypressFor(TodoActionIds.init, [`#/category_${testId}`])
        ScenarioUtils.getCypressFor(TodoActionIds.newTodoChanged, [`new Item ${testId}`])

    })

    it('should change appState', () => {
        ScenarioUtils.getCypressFor(TodoActionIds.newTodoChanged, [`ENTER`]).should(() => {
            ScenarioUtils.wait(1, 0).should(() => {
                const appState = JSON.parse(localStorage.getItem('appState'))
                expect(appState.newTodo, "newTodoWasReset").to.eql(``)
                expect(appState.todoList[0].description, "description").to.eql(`new Item ${testId}`)
                expect(appState.todoList[0].done, "done").to.eql(false)
                expect(appState.todoList[0].updatedDateTime, "updatedDateTime").to.eql(null)
                expect(appState.todoList[0].createdDateTime, "createdDateTime").to.eql("")
                expect(appState.todoList[0].id, "id").to.eql("id")
                expect(appState.todoList, "todoWasCreated").to.eql([{
                    createdDateTime: "",
                    description: "new Item ${testId}",
                    done: false,
                    id: "uuid",
                    updatedDateTime: null
                }])
            })
        })
    })
})


/******* S.D.G. *******/




