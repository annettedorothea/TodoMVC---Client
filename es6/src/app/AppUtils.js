/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/


import * as AppState from "../../gen/ace/AppState";
import * as Utils from "../../gen/ace/Utils";
import React from "react";
import ReactDOM from "react-dom";
import EventListenerRegistrationTodo from "../../gen/todo/EventListenerRegistration";
import EventFactoryRegistrationTodo from "../../gen/todo/EventFactoryRegistration";
import {init} from "../../gen/todo/ActionFunctions";
import {Container, setContainerState} from "../components/Container";

export function dumpAppState() {
    console.info(AppState.getAppState());
}


export function initEventListenersAndFactories() {
    EventListenerRegistrationTodo.init();
    EventFactoryRegistrationTodo.init();
}

export function startApp() {
    window.onhashchange = () => {
        init(window.location.hash.substring(1));
    };
    Utils.loadSettings().then(() => {
        init(window.location.hash.substring(1));
    });
}

export function startReplay() {
    window.onhashchange = () => {
    };
}

export function createInitialAppState() {
    const initialAppState = {
        container: {
            footer: {
                categoryId: "",
                itemCount: 0
            },
            filter: "all",
            newTodoInput: {
                newTodo: "",
            },
            spinner: {
                loading: false,
            },
            todos: {
                todoList: []
            },
        }
    };
    AppState.setInitialAppState(initialAppState);
}

function createHeaders(authorize) {
    const headers = new Headers();
    headers.append("Content-Type", "application/json");
    headers.append("Accept", "application/json");
    if (authorize === true) {
        let authorization = basicAuth();
        if (authorization !== undefined) {
            headers.append("Authorization", authorization);
        }
    }
    return headers;
}

function addUuidToUrl(url, uuid) {
    if (uuid) {
        if (url.indexOf("?") < 0) {
            url += "?uuid=" + uuid;
        } else {
            url += "&uuid=" + uuid;
        }
    }
    return url;
}

function httpRequest(methodType, url, uuid, authorize, data) {
    return new Promise((resolve, reject) => {
        const options = {
            method: methodType,
            headers: createHeaders(authorize),
            mode: 'cors',
            cache: 'no-cache'
        };
        if (data && methodType !== "GET") {
            options.body = JSON.stringify(data);
        }
        url = addUuidToUrl(url, uuid);
        const request = new Request(url, options);

        fetch(request).then(function (response) {
            response.text().then((text) => {
                if (response.status >= 300) {
                    const error = {
                        code: response.status,
                        text: response.statusText,
                        key: text
                    };
                    reject(error);
                } else {
                    let data = {};
                    if (text.length > 0) {
                        data = JSON.parse(text);
                    }
                    resolve(data);
                }
            });
        }).catch(function (error) {
            const status = {
                code: error.name,
                text: error.message
            };
            reject(status);
        });
    });
}

export function httpGet(url, uuid, authorize) {
    return httpRequest("GET", url, uuid, authorize, null);
}

export function httpPost(url, uuid, authorize, data) {
    return httpRequest("POST", url, uuid, authorize, data);
}

export function httpPut(url, uuid, authorize, data) {
    return httpRequest("PUT", url, uuid, authorize, data);
}

export function httpDelete(url, uuid, authorize, data) {
    return httpRequest("DELETE", url, uuid, authorize, data);
}

function basicAuth() {
    return "<your authorization>";
}

export function createUUID() {
    let d = new Date().getTime();
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        let r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });
}

export function displayUnexpectedError(error) {
    console.error("unexpected error ", error);
}

export function deepCopy(object) {
    return JSON.parse(JSON.stringify(object));
}

let container;

export function stateUpdated(appState) {
    setContainerState(appState.container);
    if (Utils.settings && Utils.settings.mode === "dev") {
        localStorage.setItem("appState", JSON.stringify(appState));
    }
}

export function renderApp() {
    container = <Container {...AppState.getAppState()} />;
    container = ReactDOM.render(
        container,
        document.getElementById('root')
    );
}


/******* S.D.G. *******/



