/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




import React, { useState } from 'react';

import { Footer } from "./container/Footer";
import { NewTodoInput } from "./container/NewTodoInput";
import { Spinner } from "./container/Spinner";
import { Todos } from "./container/Todos";

import * as Utils from "../../gen/ace/Utils";
import {toggleAll} from "../../gen/todo/ActionFunctions";

export let setContainerState = (appState) => {
	console.log("setContainerState", appState);
};

export const Container = (props) => {

	console.log("props", props);
	const [container, setContainer] = useState(props.container);
	setContainerState = setContainer;

	let itemCount = 0;
	if (container.todos && container.todos.todoList && container.todos.todoList) {
		itemCount = container.todos.todoList.filter(i => i.done === false).length;
		console.log("itemCount", itemCount);
	}

	return <div>
		<div className="learn-bar body">
			<aside className="learn">
				<header>
					<h3>ACE</h3>
					<span className={"source-links"}>
						<h5>ACE Example</h5>
						<a href="https://github.com/annettedorothea/TodoMVC---Client" target="sourceclient">
							Source Client
						</a>
						<br/>
						<a href="https://github.com/annettedorothea/TodoMVC---Server" target="sourceserver">
							Source Server
						</a>
					</span>
				</header>
				<hr/>
				<blockquote className="quote speech-bubble">
					<p>ACE is an architecture that allows you to write an executable timeline during the execution of
						your application. ACE stands for Action - Command - Event:</p>
					<ul>
						<li>The action initializes non-deterministic data.</li>
						<li>The command contains the business logic and fires events.</li>
						<li>The views listen to these events and update themselves accordingly.</li>
					</ul>
					<p>Both client and server are implemented based on the ACE architecture. The server was written in
						Java with Dropwizard; the client uses React.</p>
					<footer>
						<a href="https://github.com/annettedorothea/com.anfelisa.ace.gen" target="ace">
							ACE Code Generator based on Xtext
						</a>
					</footer>
				</blockquote>
				<footer>
					<hr/>
					<em>
						These functions can be executed from JavaScript console:
						<ul>
							<li>Todo.saveTimeline(&lt;description&gt;, &lt;your name&gt;)</li>
							<li>Todo.replayTimeline(&lt;id&gt;, &lt;pauseInMillis (default and minimum are 100)&gt;)
							</li>
							<li>Todo.dumpTimeline()</li>
							<li>Todo.dumpAppState()</li>
							You can view all saved timelines on <a
							href={`${Utils.settings ? Utils.settings.aceScenariosBaseUrl : ""}#/${Utils.settings ? Utils.settings.aceScenariosApiKey : ""}`}
							target="acegen"
						>acegen.de</a>.
						</ul>
					</em>
				</footer>
			</aside>
			<div>
				<section className="todoapp">
					<header className="header">
						<h1>
							<span>todos</span>
							<Spinner {...container.spinner}/>
						</h1>
						<NewTodoInput{...container.newTodoInput}/>
					</header>
					<section className="main">
						<input
							className="toggle-all"
							type="checkbox"
							onChange={toggleAll}
							checked={container.todos && container.todos.todoList ? container.todos.todoList.filter((todo) => todo.done === false).length === 0 : false}
						/>
					</section>
					<Todos {...container.todos} filter={container.filter}/>
					<Footer
						categoryId={container.footer ? container.footer.categoryId: ""}
						filter={container.filter}
						itemCount={itemCount}
					/>
				</section>
			</div>
			<footer className="info">
				<p>Double-click to edit a todo.</p>
				<p>Created by Annette Pohl.</p>
			</footer>
		</div>
	</div>
}


/******* S.D.G. *******/



