	/********************************************************************************
	 * generated by de.acegen 1.3.0
	 ********************************************************************************/
	
	
	

	import * as AppUtils from "../../src/app/AppUtils";
	import * as Utils from "./Utils";
	import * as AppState from "./AppState";
	
	export let timeline = [];
	export let listeners = {};
	let factories = {};
	let actionQueue = [];
	export let delayedActions = {};

    export function registerListener(eventName, listener) {
        if (!eventName.trim()) {
            throw new Error('cannot register listener for empty eventName');
        }
        if (!listener) {
            throw new Error('cannot register undefined listener for event ' + eventName);
        }
        let listenersForEventName;
        if (listeners[eventName] === undefined) {
            listeners[eventName] = [];
        }
        listenersForEventName = listeners[eventName];
        listenersForEventName.push(listener);
    }

    export function registerFactory(eventName, factory) {
        if (!eventName.trim()) {
            throw new Error('cannot register factory for empty eventName');
        }
        if (!factory) {
            throw new Error('cannot register undefined factory for event ' + eventName);
        }
        factories[eventName] = factory;
    }

    export function addItemToTimeLine(item) {
    	if (Utils.settings && Utils.settings.timelineSize > 0) {
		    timeline.push(AppUtils.deepCopy(item));
			if (timeline.length > Utils.settings.timelineSize) {
			    timeline.shift();
			    while (timeline.length > 0 && timeline.length > 0 && !timeline[0].appState) {
			        timeline.shift();
			    }
			}
		}
    }

    export function addActionToQueue(action) {
		actionQueue.push(action);
	    applyNextActions();
    }

    function applyNextActions() {
        let action = actionQueue.shift();
        if (action) {
	    	addItemToTimeLine({appState: AppState.getAppState()});
			if (action.asynchronous) {
			    action.applyAction().then(() => {
			    	callApplyNextActions();
			    }, (error) => {
			        AppUtils.displayUnexpectedError(error);
			    	callApplyNextActions();
			    });
			} else {
				try {
					action.applyAction();
			    	callApplyNextActions();
				} catch(error) {
			        AppUtils.displayUnexpectedError(error);
			    	callApplyNextActions();
				}
			}
        }
    }
    
    function callApplyNextActions() {
		applyNextActions();
    }

    function triggerAction(action) {
        addActionToQueue(action);
    }

    export function startReplay(timeline, pauseInMillis) {
	    AppUtils.startReplay();

        let events = [];
		
		let appStateWasSet = false;
        for (let i = 0; i < timeline.length; i++) {
            let item = timeline[i];
            if (item.event && appStateWasSet && item.event.eventName !== "TriggerAction") {
                const eventData = item.event.eventData;
                let event = factories[item.event.eventName](eventData);
                events.push(event);
            }
			if (item.appState && !appStateWasSet) {
			    AppState.setInitialAppState(item.appState);
			    appStateWasSet = true;
			}
            
        }

		setTimeout(() => replayNextEvent(events, pauseInMillis), pauseInMillis);
    }
    
    function replayNextEvent(events, pauseInMillis) {
        let event = events.shift();
        if (event) {
        	event.replay();
        	setTimeout(() => replayNextEvent(events, pauseInMillis), pauseInMillis);
	    } else {
	        setTimeout(() => finishReplay(), pauseInMillis);
	    }
	}
	
	function finishReplay() {
	    console.info("replay finished");
	    timeline = [];
	    actionQueue = [];
	    AppUtils.createInitialAppState();
	    AppUtils.startApp();
	}
	
	registerListener('TriggerAction', triggerAction);
	
	
	
	
	/******* S.D.G. *******/
	
	
	
	
