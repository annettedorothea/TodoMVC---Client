/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




import AppUtils from "../../src/app/AppUtils";

export let appState;
import {setState} from "../components/ContainerComponent";

export function getAppState() {
	return AppUtils.deepCopy(appState);
}

export function setInitialAppState(initialAppState) {
	appState = AppUtils.deepCopy(initialAppState);
}

export function get_footer() {
	if (!appState.footer) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.footer);
}

export function set_footer(eventData) {
	appState.footer = eventData.footer;
	setState(getAppState());
}

export function merge_footer(eventData) {
	if (!appState.footer) {
		appState.footer = {};
	}
	if (eventData.categoryId !== undefined) {
		appState.footer.categoryId = eventData.categoryId;
	}
	setState(getAppState());
}

export function get_footer_categoryId() {
	if (!appState.footer) {
		return undefined;
	}
	return appState.footer.categoryId;
}

export function set_footer_categoryId(eventData) {
	if (!appState.footer) {
		appState.footer = {};
	}
	appState.footer.categoryId = eventData.categoryId;
	setState(getAppState());
}

export function get_filter() {
	return appState.filter;
}

export function set_filter(eventData) {
	appState.filter = eventData.filter;
	setState(getAppState());
}

export function get_newTodoInput() {
	if (!appState.newTodoInput) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.newTodoInput);
}

export function set_newTodoInput(eventData) {
	appState.newTodoInput = eventData.newTodoInput;
	setState(getAppState());
}

export function merge_newTodoInput(eventData) {
	if (!appState.newTodoInput) {
		appState.newTodoInput = {};
	}
	if (eventData.newTodo !== undefined) {
		appState.newTodoInput.newTodo = eventData.newTodo;
	}
	setState(getAppState());
}

export function get_newTodoInput_newTodo() {
	if (!appState.newTodoInput) {
		return undefined;
	}
	return appState.newTodoInput.newTodo;
}

export function set_newTodoInput_newTodo(eventData) {
	if (!appState.newTodoInput) {
		appState.newTodoInput = {};
	}
	appState.newTodoInput.newTodo = eventData.newTodo;
	setState(getAppState());
}

export function get_spinner() {
	if (!appState.spinner) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.spinner);
}

export function set_spinner(eventData) {
	appState.spinner = eventData.spinner;
	setState(getAppState());
}

export function merge_spinner(eventData) {
	if (!appState.spinner) {
		appState.spinner = {};
	}
	if (eventData.loading !== undefined) {
		appState.spinner.loading = eventData.loading;
	}
	setState(getAppState());
}

export function get_spinner_loading() {
	if (!appState.spinner) {
		return undefined;
	}
	return appState.spinner.loading;
}

export function set_spinner_loading(eventData) {
	if (!appState.spinner) {
		appState.spinner = {};
	}
	appState.spinner.loading = eventData.loading;
	setState(getAppState());
}

export function get_error() {
	if (!appState.error) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.error);
}

export function set_error(eventData) {
	appState.error = eventData.error;
	setState(getAppState());
}

export function merge_error(eventData) {
	if (!appState.error) {
		appState.error = {};
	}
	if (eventData.errorMessage !== undefined) {
		appState.error.errorMessage = eventData.errorMessage;
	}
	setState(getAppState());
}

export function get_error_errorMessage() {
	if (!appState.error) {
		return undefined;
	}
	return appState.error.errorMessage;
}

export function set_error_errorMessage(eventData) {
	if (!appState.error) {
		appState.error = {};
	}
	appState.error.errorMessage = eventData.errorMessage;
	setState(getAppState());
}

export function get_todos() {
	if (!appState.todos) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.todos);
}

export function set_todos(eventData) {
	appState.todos = eventData.todos;
	setState(getAppState());
}

export function merge_todos(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (eventData.todoList !== undefined) {
		appState.todos.todoList = eventData.todoList;
	}
	if (eventData.editedTodo !== undefined) {
		appState.todos.editedTodo = eventData.editedTodo;
	}
	setState(getAppState());
}

export function get_todos_todoList() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.todoList) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.todos.todoList);
}

export function set_todos_todoList(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	appState.todos.todoList = eventData.todoList;
	setState(getAppState());
}

export function merge_todos_todoList(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (!appState.todos.todoList) {
		appState.todos.todoList = {};
	}
	if (eventData.categoryId !== undefined) {
		appState.todos.todoList.categoryId = eventData.categoryId;
	}
	if (eventData.id !== undefined) {
		appState.todos.todoList.id = eventData.id;
	}
	if (eventData.description !== undefined) {
		appState.todos.todoList.description = eventData.description;
	}
	if (eventData.done !== undefined) {
		appState.todos.todoList.done = eventData.done;
	}
	if (eventData.createdDateTime !== undefined) {
		appState.todos.todoList.createdDateTime = eventData.createdDateTime;
	}
	if (eventData.updatedDateTime !== undefined) {
		appState.todos.todoList.updatedDateTime = eventData.updatedDateTime;
	}
	setState(getAppState());
}

export function get_todos_editedTodo() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.editedTodo) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.todos.editedTodo);
}

export function set_todos_editedTodo(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	appState.todos.editedTodo = eventData.editedTodo;
	setState(getAppState());
}

export function merge_todos_editedTodo(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (!appState.todos.editedTodo) {
		appState.todos.editedTodo = {};
	}
	if (eventData.categoryId !== undefined) {
		appState.todos.editedTodo.categoryId = eventData.categoryId;
	}
	if (eventData.id !== undefined) {
		appState.todos.editedTodo.id = eventData.id;
	}
	if (eventData.description !== undefined) {
		appState.todos.editedTodo.description = eventData.description;
	}
	if (eventData.done !== undefined) {
		appState.todos.editedTodo.done = eventData.done;
	}
	if (eventData.createdDateTime !== undefined) {
		appState.todos.editedTodo.createdDateTime = eventData.createdDateTime;
	}
	if (eventData.updatedDateTime !== undefined) {
		appState.todos.editedTodo.updatedDateTime = eventData.updatedDateTime;
	}
	if (eventData.editedDescription !== undefined) {
		appState.todos.editedTodo.editedDescription = eventData.editedDescription;
	}
	setState(getAppState());
}

export function get_todos_editedTodo_categoryId() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.editedTodo) {
		return undefined;
	}
	return appState.todos.editedTodo.categoryId;
}

export function set_todos_editedTodo_categoryId(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (!appState.todos.editedTodo) {
		appState.todos.editedTodo = {};
	}
	appState.todos.editedTodo.categoryId = eventData.categoryId;
	setState(getAppState());
}

export function get_todos_editedTodo_id() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.editedTodo) {
		return undefined;
	}
	return appState.todos.editedTodo.id;
}

export function set_todos_editedTodo_id(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (!appState.todos.editedTodo) {
		appState.todos.editedTodo = {};
	}
	appState.todos.editedTodo.id = eventData.id;
	setState(getAppState());
}

export function get_todos_editedTodo_description() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.editedTodo) {
		return undefined;
	}
	return appState.todos.editedTodo.description;
}

export function set_todos_editedTodo_description(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (!appState.todos.editedTodo) {
		appState.todos.editedTodo = {};
	}
	appState.todos.editedTodo.description = eventData.description;
	setState(getAppState());
}

export function get_todos_editedTodo_done() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.editedTodo) {
		return undefined;
	}
	return appState.todos.editedTodo.done;
}

export function set_todos_editedTodo_done(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (!appState.todos.editedTodo) {
		appState.todos.editedTodo = {};
	}
	appState.todos.editedTodo.done = eventData.done;
	setState(getAppState());
}

export function get_todos_editedTodo_createdDateTime() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.editedTodo) {
		return undefined;
	}
	return appState.todos.editedTodo.createdDateTime;
}

export function set_todos_editedTodo_createdDateTime(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (!appState.todos.editedTodo) {
		appState.todos.editedTodo = {};
	}
	appState.todos.editedTodo.createdDateTime = eventData.createdDateTime;
	setState(getAppState());
}

export function get_todos_editedTodo_updatedDateTime() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.editedTodo) {
		return undefined;
	}
	return appState.todos.editedTodo.updatedDateTime;
}

export function set_todos_editedTodo_updatedDateTime(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (!appState.todos.editedTodo) {
		appState.todos.editedTodo = {};
	}
	appState.todos.editedTodo.updatedDateTime = eventData.updatedDateTime;
	setState(getAppState());
}

export function get_todos_editedTodo_editedDescription() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.editedTodo) {
		return undefined;
	}
	return appState.todos.editedTodo.editedDescription;
}

export function set_todos_editedTodo_editedDescription(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (!appState.todos.editedTodo) {
		appState.todos.editedTodo = {};
	}
	appState.todos.editedTodo.editedDescription = eventData.editedDescription;
	setState(getAppState());
}

