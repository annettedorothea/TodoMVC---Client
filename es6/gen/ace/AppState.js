/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




import AppUtils from "../../src/app/AppUtils";

export let appState;

import { setContainerState } from "../components/ContainerComponent";
import { setFooterState } from "../components/container/FooterComponent";
import { setNewTodoInputState } from "../components/container/NewTodoInputComponent";
import { setSpinnerState } from "../components/container/SpinnerComponent";
import { setErrorState } from "../components/container/ErrorComponent";
import { setTodosState } from "../components/container/TodosComponent";

export function getAppState() {
	return AppUtils.deepCopy(appState);
}

export function setInitialAppState(initialAppState) {
	appState = AppUtils.deepCopy(initialAppState);
}

export function get_container_footer() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.footer) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.container.footer);
}

export function set_container_footer(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	appState.container.footer = eventData.footer;
	const newAppState = getAppState();
	setFooterState(AppUtils.deepCopy(appState.container.footer));
	AppUtils.stateUpdated(newAppState);
}

export function merge_container_footer(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.footer) {
		appState.container.footer = {};
	}
	if (eventData.categoryId !== undefined) {
		appState.container.footer.categoryId = eventData.categoryId;
	}
	if (eventData.itemCount !== undefined) {
		appState.container.footer.itemCount = eventData.itemCount;
	}
	const newAppState = getAppState();
	setFooterState(AppUtils.deepCopy(appState.container.footer));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_footer_categoryId() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.footer) {
		return undefined;
	}
	return appState.container.footer.categoryId;
}

export function set_container_footer_categoryId(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.footer) {
		appState.container.footer = {};
	}
	appState.container.footer.categoryId = eventData.categoryId;
	const newAppState = getAppState();
	setFooterState(AppUtils.deepCopy(appState.container.footer));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_footer_itemCount() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.footer) {
		return undefined;
	}
	return appState.container.footer.itemCount;
}

export function set_container_footer_itemCount(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.footer) {
		appState.container.footer = {};
	}
	appState.container.footer.itemCount = eventData.itemCount;
	const newAppState = getAppState();
	setFooterState(AppUtils.deepCopy(appState.container.footer));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_filter() {
	if (!appState.container) {
		return undefined;
	}
	return appState.container.filter;
}

export function set_container_filter(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	appState.container.filter = eventData.filter;
	const newAppState = getAppState();
	setContainerState(AppUtils.deepCopy(appState.container));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_newTodoInput() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.newTodoInput) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.container.newTodoInput);
}

export function set_container_newTodoInput(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	appState.container.newTodoInput = eventData.newTodoInput;
	const newAppState = getAppState();
	setNewTodoInputState(AppUtils.deepCopy(appState.container.newTodoInput));
	AppUtils.stateUpdated(newAppState);
}

export function merge_container_newTodoInput(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.newTodoInput) {
		appState.container.newTodoInput = {};
	}
	if (eventData.newTodo !== undefined) {
		appState.container.newTodoInput.newTodo = eventData.newTodo;
	}
	const newAppState = getAppState();
	setNewTodoInputState(AppUtils.deepCopy(appState.container.newTodoInput));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_newTodoInput_newTodo() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.newTodoInput) {
		return undefined;
	}
	return appState.container.newTodoInput.newTodo;
}

export function set_container_newTodoInput_newTodo(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.newTodoInput) {
		appState.container.newTodoInput = {};
	}
	appState.container.newTodoInput.newTodo = eventData.newTodo;
	const newAppState = getAppState();
	setNewTodoInputState(AppUtils.deepCopy(appState.container.newTodoInput));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_spinner() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.spinner) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.container.spinner);
}

export function set_container_spinner(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	appState.container.spinner = eventData.spinner;
	const newAppState = getAppState();
	setSpinnerState(AppUtils.deepCopy(appState.container.spinner));
	AppUtils.stateUpdated(newAppState);
}

export function merge_container_spinner(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.spinner) {
		appState.container.spinner = {};
	}
	if (eventData.loading !== undefined) {
		appState.container.spinner.loading = eventData.loading;
	}
	const newAppState = getAppState();
	setSpinnerState(AppUtils.deepCopy(appState.container.spinner));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_spinner_loading() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.spinner) {
		return undefined;
	}
	return appState.container.spinner.loading;
}

export function set_container_spinner_loading(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.spinner) {
		appState.container.spinner = {};
	}
	appState.container.spinner.loading = eventData.loading;
	const newAppState = getAppState();
	setSpinnerState(AppUtils.deepCopy(appState.container.spinner));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_error() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.error) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.container.error);
}

export function set_container_error(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	appState.container.error = eventData.error;
	const newAppState = getAppState();
	setErrorState(AppUtils.deepCopy(appState.container.error));
	AppUtils.stateUpdated(newAppState);
}

export function merge_container_error(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.error) {
		appState.container.error = {};
	}
	if (eventData.errorMessage !== undefined) {
		appState.container.error.errorMessage = eventData.errorMessage;
	}
	const newAppState = getAppState();
	setErrorState(AppUtils.deepCopy(appState.container.error));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_error_errorMessage() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.error) {
		return undefined;
	}
	return appState.container.error.errorMessage;
}

export function set_container_error_errorMessage(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.error) {
		appState.container.error = {};
	}
	appState.container.error.errorMessage = eventData.errorMessage;
	const newAppState = getAppState();
	setErrorState(AppUtils.deepCopy(appState.container.error));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_todos() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.todos) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.container.todos);
}

export function set_container_todos(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	appState.container.todos = eventData.todos;
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.container.todos));
	AppUtils.stateUpdated(newAppState);
}

export function merge_container_todos(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.todos) {
		appState.container.todos = {};
	}
	if (eventData.todoList !== undefined) {
		appState.container.todos.todoList = eventData.todoList;
	}
	if (eventData.editedDescription !== undefined) {
		appState.container.todos.editedDescription = eventData.editedDescription;
	}
	if (eventData.editedTodoId !== undefined) {
		appState.container.todos.editedTodoId = eventData.editedTodoId;
	}
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.container.todos));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_todos_todoList() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.todos) {
		return undefined;
	}
	if (!appState.container.todos.todoList) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.container.todos.todoList);
}

export function set_container_todos_todoList(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.todos) {
		appState.container.todos = {};
	}
	appState.container.todos.todoList = eventData.todoList;
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.container.todos));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_todos_editedDescription() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.todos) {
		return undefined;
	}
	return appState.container.todos.editedDescription;
}

export function set_container_todos_editedDescription(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.todos) {
		appState.container.todos = {};
	}
	appState.container.todos.editedDescription = eventData.editedDescription;
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.container.todos));
	AppUtils.stateUpdated(newAppState);
}

export function get_container_todos_editedTodoId() {
	if (!appState.container) {
		return undefined;
	}
	if (!appState.container.todos) {
		return undefined;
	}
	return appState.container.todos.editedTodoId;
}

export function set_container_todos_editedTodoId(eventData) {
	if (!appState.container) {
		appState.container = {};
	}
	if (!appState.container.todos) {
		appState.container.todos = {};
	}
	appState.container.todos.editedTodoId = eventData.editedTodoId;
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.container.todos));
	AppUtils.stateUpdated(newAppState);
}

