/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




import AppUtils from "../../src/app/AppUtils";

export let appState;

import {setContainerState} from "../components/ContainerComponent";
import {setFooterState} from "../components/FooterComponent";
import {setNewTodoInputState} from "../components/NewTodoInputComponent";
import {setSpinnerState} from "../components/SpinnerComponent";
import {setErrorState} from "../components/ErrorComponent";
import {setTodosState} from "../components/TodosComponent";

export function getAppState() {
	return AppUtils.deepCopy(appState);
}

export function setInitialAppState(initialAppState) {
	appState = AppUtils.deepCopy(initialAppState);
}

export function get_footer() {
	if (!appState.footer) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.footer);
}

export function set_footer(eventData) {
	appState.footer = eventData.footer;
	const newAppState = getAppState();
	setFooterState(AppUtils.deepCopy(appState.footer));
	AppUtils.stateUpdated(newAppState);
}

export function merge_footer(eventData) {
	if (!appState.footer) {
		appState.footer = {};
	}
	if (eventData.categoryId !== undefined) {
		appState.footer.categoryId = eventData.categoryId;
	}
	const newAppState = getAppState();
	setFooterState(AppUtils.deepCopy(appState.footer));
	AppUtils.stateUpdated(newAppState);
}

export function get_footer_categoryId() {
	if (!appState.footer) {
		return undefined;
	}
	return appState.footer.categoryId;
}

export function set_footer_categoryId(eventData) {
	if (!appState.footer) {
		appState.footer = {};
	}
	appState.footer.categoryId = eventData.categoryId;
	const newAppState = getAppState();
	setFooterState(AppUtils.deepCopy(appState.footer));
	AppUtils.stateUpdated(newAppState);
}

export function get_filter() {
	return appState.filter;
}

export function set_filter(eventData) {
	appState.filter = eventData.filter;
	const newAppState = getAppState();
	setContainerState(newAppState);
	AppUtils.stateUpdated(newAppState);
}

export function get_newTodoInput() {
	if (!appState.newTodoInput) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.newTodoInput);
}

export function set_newTodoInput(eventData) {
	appState.newTodoInput = eventData.newTodoInput;
	const newAppState = getAppState();
	setNewTodoInputState(AppUtils.deepCopy(appState.newTodoInput));
	AppUtils.stateUpdated(newAppState);
}

export function merge_newTodoInput(eventData) {
	if (!appState.newTodoInput) {
		appState.newTodoInput = {};
	}
	if (eventData.newTodo !== undefined) {
		appState.newTodoInput.newTodo = eventData.newTodo;
	}
	const newAppState = getAppState();
	setNewTodoInputState(AppUtils.deepCopy(appState.newTodoInput));
	AppUtils.stateUpdated(newAppState);
}

export function get_newTodoInput_newTodo() {
	if (!appState.newTodoInput) {
		return undefined;
	}
	return appState.newTodoInput.newTodo;
}

export function set_newTodoInput_newTodo(eventData) {
	if (!appState.newTodoInput) {
		appState.newTodoInput = {};
	}
	appState.newTodoInput.newTodo = eventData.newTodo;
	const newAppState = getAppState();
	setNewTodoInputState(AppUtils.deepCopy(appState.newTodoInput));
	AppUtils.stateUpdated(newAppState);
}

export function get_spinner() {
	if (!appState.spinner) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.spinner);
}

export function set_spinner(eventData) {
	appState.spinner = eventData.spinner;
	const newAppState = getAppState();
	setSpinnerState(AppUtils.deepCopy(appState.spinner));
	AppUtils.stateUpdated(newAppState);
}

export function merge_spinner(eventData) {
	if (!appState.spinner) {
		appState.spinner = {};
	}
	if (eventData.loading !== undefined) {
		appState.spinner.loading = eventData.loading;
	}
	const newAppState = getAppState();
	setSpinnerState(AppUtils.deepCopy(appState.spinner));
	AppUtils.stateUpdated(newAppState);
}

export function get_spinner_loading() {
	if (!appState.spinner) {
		return undefined;
	}
	return appState.spinner.loading;
}

export function set_spinner_loading(eventData) {
	if (!appState.spinner) {
		appState.spinner = {};
	}
	appState.spinner.loading = eventData.loading;
	const newAppState = getAppState();
	setSpinnerState(AppUtils.deepCopy(appState.spinner));
	AppUtils.stateUpdated(newAppState);
}

export function get_error() {
	if (!appState.error) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.error);
}

export function set_error(eventData) {
	appState.error = eventData.error;
	const newAppState = getAppState();
	setErrorState(AppUtils.deepCopy(appState.error));
	AppUtils.stateUpdated(newAppState);
}

export function merge_error(eventData) {
	if (!appState.error) {
		appState.error = {};
	}
	if (eventData.errorMessage !== undefined) {
		appState.error.errorMessage = eventData.errorMessage;
	}
	const newAppState = getAppState();
	setErrorState(AppUtils.deepCopy(appState.error));
	AppUtils.stateUpdated(newAppState);
}

export function get_error_errorMessage() {
	if (!appState.error) {
		return undefined;
	}
	return appState.error.errorMessage;
}

export function set_error_errorMessage(eventData) {
	if (!appState.error) {
		appState.error = {};
	}
	appState.error.errorMessage = eventData.errorMessage;
	const newAppState = getAppState();
	setErrorState(AppUtils.deepCopy(appState.error));
	AppUtils.stateUpdated(newAppState);
}

export function get_todos() {
	if (!appState.todos) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.todos);
}

export function set_todos(eventData) {
	appState.todos = eventData.todos;
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.todos));
	AppUtils.stateUpdated(newAppState);
}

export function merge_todos(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	if (eventData.todoList !== undefined) {
		appState.todos.todoList = eventData.todoList;
	}
	if (eventData.editedDescription !== undefined) {
		appState.todos.editedDescription = eventData.editedDescription;
	}
	if (eventData.editedTodoId !== undefined) {
		appState.todos.editedTodoId = eventData.editedTodoId;
	}
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.todos));
	AppUtils.stateUpdated(newAppState);
}

export function get_todos_todoList() {
	if (!appState.todos) {
		return undefined;
	}
	if (!appState.todos.todoList) {
		return undefined;
	}
	return AppUtils.deepCopy(appState.todos.todoList);
}

export function set_todos_todoList(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	appState.todos.todoList = eventData.todoList;
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.todos));
	AppUtils.stateUpdated(newAppState);
}

export function get_todos_editedDescription() {
	if (!appState.todos) {
		return undefined;
	}
	return appState.todos.editedDescription;
}

export function set_todos_editedDescription(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	appState.todos.editedDescription = eventData.editedDescription;
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.todos));
	AppUtils.stateUpdated(newAppState);
}

export function get_todos_editedTodoId() {
	if (!appState.todos) {
		return undefined;
	}
	return appState.todos.editedTodoId;
}

export function set_todos_editedTodoId(eventData) {
	if (!appState.todos) {
		appState.todos = {};
	}
	appState.todos.editedTodoId = eventData.editedTodoId;
	const newAppState = getAppState();
	setTodosState(AppUtils.deepCopy(appState.todos));
	AppUtils.stateUpdated(newAppState);
}

