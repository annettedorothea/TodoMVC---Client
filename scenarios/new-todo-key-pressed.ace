HttpClient 

newtodokeypressed

scenarios 

	CreateFirstTodo
		GIVEN 
			newtodochanged.NewTodoChanged
		WHEN
			todo.NewTodoKeyPressed(keyCode : 13)
			squishyValues 
				{}, 
				{
					uuid "${testId}"
					serverSystemTime "2020-10-10T14:48:37.000Z"
				}
		THEN
			expectedState 
				todoWasCreatedAndReturedInTodoList todo.container.todos.todoList should be [{
					categoryId: "category_${testId}",
					createdDateTime: "2020-10-10T14:48:37",
					description: "1st Item ${testId}",
					done: false,
					id: "${testId}",
					updatedDateTime: null
				}]
				newTodoWasReset todo.container.newTodoInput.newTodo should be ""

	EscTodoCreation
		GIVEN 
			newtodochanged.NewTodoChanged
		WHEN
			todo.NewTodoKeyPressed(keyCode : 27)
		THEN
			expectedState 
				todoWasNotCreatedAndReturedInTodoList todo.container.todos.todoList should be []
				newTodoWasReset todo.container.newTodoInput.newTodo should be ""

	CreateSecondTodo
		GIVEN 
			newtodochanged.NewTodoChangedSecondTime
		WHEN
			todo.NewTodoKeyPressed(keyCode : 13)
			squishyValues 
				{}, 
				{
					uuid "${testId}_2"
					serverSystemTime "2020-10-10T14:58:37.000Z"
				}
		THEN
			expectedState 
				todoWasCreatedAndReturedInTodoList todo.container.todos.todoList should be [
					{
						categoryId: "category_${testId}",
						createdDateTime: "2020-10-10T14:48:37",
						description: "1st Item ${testId}",
						done: false,
						id: "${testId}",
						updatedDateTime: null
					},
					{
						categoryId: "category_${testId}",
						createdDateTime: "2020-10-10T14:58:37",
						description: "2nd Item ${testId}",
						done: false,
						id: "${testId}_2",
						updatedDateTime: null
					}
				]
				newTodoWasReset todo.container.newTodoInput.newTodo should be ""
				
				
				
				